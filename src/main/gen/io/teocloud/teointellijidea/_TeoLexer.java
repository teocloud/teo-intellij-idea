/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package io.teocloud.teointellijidea;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static io.teocloud.teointellijidea.psi.TeoTypes.*;
import static com.intellij.psi.TokenType.*;
import com.intellij.openapi.util.text.StringUtil;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Teo.flex</tt>
 */
public class _TeoLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DECORATOR = 2;
  public static final int PPL = 4;
  public static final int BLOCK = 6;
  public static final int DECL = 8;
  public static final int ENUM = 10;
  public static final int ENUM_DECL = 12;
  public static final int MODEL = 14;
  public static final int MODEL_DECL = 16;
  public static final int LET_DECL = 18;
  public static final int CONFIG = 20;
  public static final int CONFIG_DECL = 22;
  public static final int TYPE = 24;
  public static final int ENUM_MEMBER = 26;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  3,  3,  4,  4,  5,  5,  6,  6, 
     7,  7,  3,  3,  8,  8,  9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 3872 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>12]<<6)|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\7\3\1\4\4\3\1\5\1\6\1\7\4\3\1\10\6\3\1\11\1\12\361\3");

  /* The ZZ_CMAP_Y table has 704 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\26\3\1\4\1\3\1\5\3\3\1\6\5\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\10\1\3\1\10\1\4\4\3\1\6"+
    "\1\10\34\3\1\4\1\10\4\3\1\11\1\3\1\10\2\3\1\12\2\3\1\10\1\5\2\3\1\12\16\3"+
    "\1\13\227\3\1\4\12\3\1\10\1\6\2\3\1\14\1\3\1\10\5\3\1\5\114\3\1\10\25\3\1"+
    "\4\56\3\1\7\1\3\1\5\1\15\2\3\1\10\3\3\1\5\5\3\1\10\1\3\1\10\5\3\1\10\1\3\1"+
    "\6\1\5\6\3\1\4\15\3\1\10\67\3\1\4\3\3\1\10\61\3\1\16\105\3\1\10\32\3");

  /* The ZZ_CMAP_A table has 960 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\26\1\27\1\1\22\0\1\3\1\51\1\4\1\0\1\54\3\0\1\42\1\43\2\0\1"+
    "\53\1\7\1\10\1\25\2\24\1\61\1\60\1\63\1\24\1\62\3\24\1\47\2\0\1\46\1\0\1\50"+
    "\1\52\1\22\1\56\1\22\1\65\1\22\1\64\2\22\1\57\5\22\1\67\3\22\1\55\1\66\6\22"+
    "\1\44\1\5\1\45\1\0\1\23\1\0\1\16\1\70\1\33\1\32\1\14\1\15\1\35\1\22\1\34\1"+
    "\71\1\22\1\17\1\30\1\21\1\31\1\37\1\22\1\12\1\20\1\11\1\13\3\22\1\36\1\22"+
    "\1\40\1\0\1\41\7\0\1\26\232\0\12\6\106\0\12\6\6\0\12\6\134\0\12\6\40\0\12"+
    "\6\54\0\12\6\60\0\12\6\6\0\12\6\116\0\2\26\46\0\12\6\26\0\12\6\74\0\12\6\16"+
    "\0\62\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\2\2\1\3\1\4\1\5\1\1\1\6"+
    "\6\7\1\1\3\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\4\25\4\26\1\7\4\27\4\30\4\31\4\32\4\33"+
    "\4\34\12\35\4\36\1\4\2\0\1\37\6\7\1\40"+
    "\4\7\1\41\1\42\3\25\3\26\3\27\3\30\3\31"+
    "\3\32\3\33\3\34\11\35\3\36\1\5\1\43\5\7"+
    "\1\44\1\7\1\40\1\45\4\7\3\25\3\26\3\27"+
    "\3\30\3\31\3\32\3\33\3\34\5\35\1\46\3\35"+
    "\3\36\1\47\1\7\1\50\1\51\1\52\5\7\1\47"+
    "\1\52\1\47\1\52\1\47\1\52\1\47\1\52\1\47"+
    "\1\52\1\47\1\52\1\47\1\52\1\47\1\52\1\47"+
    "\1\52\1\35\1\46\2\35\1\46\1\35\1\47\1\52"+
    "\1\7\1\53\4\7\3\35\1\54\1\55\1\56\1\7"+
    "\1\57\2\35\1\7\2\35\1\7\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u02b8\0\u02b8"+
    "\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u02b8\0\u02b8"+
    "\0\u02b8\0\u02b8\0\u02b8\0\u02b8\0\u02b8\0\u02b8\0\u0658\0\u02b8"+
    "\0\u0692\0\u02b8\0\u02b8\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4"+
    "\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984"+
    "\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54"+
    "\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24"+
    "\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4"+
    "\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4"+
    "\0\u10fe\0\u1138\0\u02b8\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a"+
    "\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a"+
    "\0\u1464\0\u02b8\0\u02b8\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586"+
    "\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756"+
    "\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926"+
    "\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6"+
    "\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u11ac"+
    "\0\u02b8\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u044e\0\u1de8"+
    "\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8"+
    "\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188"+
    "\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358"+
    "\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528"+
    "\0\u2562\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8"+
    "\0\u2732\0\u276c\0\u044e\0\u27a6\0\u044e\0\u044e\0\u044e\0\u27e0"+
    "\0\u281a\0\u2854\0\u288e\0\u28c8\0\u0706\0\u0706\0\u07ee\0\u07ee"+
    "\0\u0910\0\u0910\0\u09f8\0\u09f8\0\u0ae0\0\u0ae0\0\u0bc8\0\u0bc8"+
    "\0\u0cb0\0\u0cb0\0\u0d98\0\u0d98\0\u0e80\0\u0e80\0\u2902\0\u0e80"+
    "\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u10c4\0\u10c4\0\u2a24\0\u044e"+
    "\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u044e"+
    "\0\u044e\0\u044e\0\u2bf4\0\u044e\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc"+
    "\0\u2d16\0\u2d50\0\u044e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\1\17\1\20\1\21\1\15\1\22\1\23"+
    "\1\24\1\25\2\26\1\27\1\30\1\26\1\31\1\26"+
    "\1\32\1\26\1\15\1\22\1\33\1\15\1\20\1\34"+
    "\2\26\1\35\1\36\3\26\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\3\26\4\22\6\26\1\15\1\16\1\17\1\20"+
    "\1\21\1\15\1\22\1\23\1\24\1\54\3\55\1\56"+
    "\3\55\1\57\1\55\1\15\1\22\1\33\1\15\1\20"+
    "\10\55\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\3\55\4\22"+
    "\6\55\1\15\1\16\1\17\1\20\1\21\1\15\1\22"+
    "\1\23\1\24\1\60\3\61\1\62\3\61\1\63\1\61"+
    "\1\15\1\22\1\33\1\15\1\20\10\61\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\3\61\4\22\6\61\1\15\1\16"+
    "\1\17\1\20\1\21\1\15\1\22\1\23\1\24\1\25"+
    "\3\26\1\64\3\26\1\32\1\26\1\15\1\22\1\33"+
    "\1\15\1\20\10\26\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\3\26\4\22\6\26\1\15\1\16\1\17\1\20\1\21"+
    "\1\15\1\22\1\23\1\24\1\65\3\66\1\67\3\66"+
    "\1\70\1\66\1\15\1\22\1\33\1\15\1\20\10\66"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\3\66\4\22\6\66"+
    "\1\15\1\16\1\17\1\20\1\21\1\15\1\22\1\23"+
    "\1\24\1\71\3\72\1\73\3\72\1\74\1\72\1\15"+
    "\1\22\1\33\1\15\1\20\10\72\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\3\72\4\22\6\72\1\15\1\16\1\17"+
    "\1\20\1\21\1\15\1\22\1\23\1\24\1\75\3\76"+
    "\1\77\3\76\1\100\1\76\1\15\1\22\1\33\1\15"+
    "\1\20\10\76\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\3\76"+
    "\4\22\6\76\1\15\1\16\1\17\1\20\1\21\1\15"+
    "\1\22\1\23\1\24\1\101\3\102\1\103\3\102\1\104"+
    "\1\102\1\15\1\22\1\33\1\15\1\20\10\102\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\3\102\4\22\6\102\1\15"+
    "\1\16\1\17\1\20\1\21\1\15\1\22\1\23\1\24"+
    "\1\105\3\106\1\107\3\106\1\110\1\106\1\15\1\22"+
    "\1\33\1\15\1\20\10\106\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\3\106\4\22\6\106\1\15\1\16\1\17\1\20"+
    "\1\21\1\15\1\22\1\23\1\24\1\111\3\112\1\113"+
    "\3\112\1\114\1\112\1\15\1\22\1\33\1\15\1\20"+
    "\10\112\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\3\112\4\22"+
    "\6\112\1\15\1\16\1\17\1\20\1\21\1\15\1\22"+
    "\1\23\1\24\1\115\3\116\1\117\3\116\1\120\1\116"+
    "\1\15\1\22\1\33\1\15\1\20\10\116\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\121\1\122\1\123\4\22\1\124"+
    "\1\125\1\116\1\126\2\116\1\15\1\16\1\17\1\20"+
    "\1\21\1\15\1\22\1\23\1\24\1\127\3\130\1\131"+
    "\3\130\1\132\1\130\1\15\1\22\1\33\1\15\1\20"+
    "\10\130\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\3\130\4\22"+
    "\6\130\74\0\1\17\67\0\1\21\2\0\1\21\1\133"+
    "\1\134\64\21\6\0\1\22\1\0\1\135\13\0\1\22"+
    "\33\0\4\22\14\0\1\22\15\0\1\22\33\0\4\22"+
    "\16\0\1\136\72\0\1\26\1\137\12\26\3\0\10\26"+
    "\15\0\15\26\11\0\14\26\3\0\10\26\15\0\15\26"+
    "\11\0\10\26\1\140\3\26\3\0\10\26\15\0\15\26"+
    "\11\0\1\26\1\141\3\26\1\142\6\26\3\0\10\26"+
    "\15\0\15\26\11\0\3\26\1\143\10\26\3\0\10\26"+
    "\15\0\15\26\11\0\2\26\1\144\11\26\3\0\10\26"+
    "\15\0\15\26\25\0\1\145\55\0\14\26\3\0\1\26"+
    "\1\146\6\26\15\0\15\26\11\0\6\26\1\147\5\26"+
    "\3\0\1\26\1\150\6\26\15\0\15\26\11\0\14\26"+
    "\3\0\1\151\7\26\15\0\15\26\50\0\1\152\73\0"+
    "\1\153\30\0\1\55\1\154\12\55\3\0\10\55\15\0"+
    "\15\55\11\0\14\55\3\0\10\55\15\0\15\55\11\0"+
    "\5\55\1\155\6\55\3\0\10\55\15\0\15\55\11\0"+
    "\2\55\1\156\11\55\3\0\10\55\15\0\15\55\11\0"+
    "\1\61\1\157\12\61\3\0\10\61\15\0\15\61\11\0"+
    "\14\61\3\0\10\61\15\0\15\61\11\0\5\61\1\160"+
    "\6\61\3\0\10\61\15\0\15\61\11\0\2\61\1\161"+
    "\11\61\3\0\10\61\15\0\15\61\11\0\5\26\1\142"+
    "\6\26\3\0\10\26\15\0\15\26\11\0\1\66\1\162"+
    "\12\66\3\0\10\66\15\0\15\66\11\0\14\66\3\0"+
    "\10\66\15\0\15\66\11\0\5\66\1\163\6\66\3\0"+
    "\10\66\15\0\15\66\11\0\2\66\1\164\11\66\3\0"+
    "\10\66\15\0\15\66\11\0\1\72\1\165\12\72\3\0"+
    "\10\72\15\0\15\72\11\0\14\72\3\0\10\72\15\0"+
    "\15\72\11\0\5\72\1\166\6\72\3\0\10\72\15\0"+
    "\15\72\11\0\2\72\1\167\11\72\3\0\10\72\15\0"+
    "\15\72\11\0\1\76\1\170\12\76\3\0\10\76\15\0"+
    "\15\76\11\0\14\76\3\0\10\76\15\0\15\76\11\0"+
    "\5\76\1\171\6\76\3\0\10\76\15\0\15\76\11\0"+
    "\2\76\1\172\11\76\3\0\10\76\15\0\15\76\11\0"+
    "\1\102\1\173\12\102\3\0\10\102\15\0\15\102\11\0"+
    "\14\102\3\0\10\102\15\0\15\102\11\0\5\102\1\174"+
    "\6\102\3\0\10\102\15\0\15\102\11\0\2\102\1\175"+
    "\11\102\3\0\10\102\15\0\15\102\11\0\1\106\1\176"+
    "\12\106\3\0\10\106\15\0\15\106\11\0\14\106\3\0"+
    "\10\106\15\0\15\106\11\0\5\106\1\177\6\106\3\0"+
    "\10\106\15\0\15\106\11\0\2\106\1\200\11\106\3\0"+
    "\10\106\15\0\15\106\11\0\1\112\1\201\12\112\3\0"+
    "\10\112\15\0\15\112\11\0\14\112\3\0\10\112\15\0"+
    "\15\112\11\0\5\112\1\202\6\112\3\0\10\112\15\0"+
    "\15\112\11\0\2\112\1\203\11\112\3\0\10\112\15\0"+
    "\15\112\11\0\1\116\1\204\12\116\3\0\10\116\15\0"+
    "\15\116\11\0\14\116\3\0\10\116\15\0\15\116\11\0"+
    "\5\116\1\205\6\116\3\0\10\116\15\0\15\116\11\0"+
    "\2\116\1\206\11\116\3\0\10\116\15\0\15\116\11\0"+
    "\1\207\13\116\3\0\10\116\15\0\15\116\11\0\14\116"+
    "\3\0\1\116\1\210\6\116\15\0\15\116\11\0\10\116"+
    "\1\211\3\116\3\0\10\116\15\0\15\116\11\0\6\116"+
    "\1\212\5\116\3\0\10\116\15\0\15\116\11\0\5\116"+
    "\1\213\6\116\3\0\10\116\15\0\15\116\11\0\14\116"+
    "\3\0\10\116\15\0\13\116\1\214\1\116\11\0\1\130"+
    "\1\215\12\130\3\0\10\130\15\0\15\130\11\0\14\130"+
    "\3\0\10\130\15\0\15\130\11\0\5\130\1\216\6\130"+
    "\3\0\10\130\15\0\15\130\11\0\2\130\1\217\11\130"+
    "\3\0\10\130\15\0\15\130\1\21\2\0\67\21\6\0"+
    "\1\220\15\0\1\220\33\0\4\220\16\0\1\221\72\0"+
    "\2\26\1\222\11\26\3\0\10\26\15\0\15\26\11\0"+
    "\1\223\1\26\1\224\11\26\3\0\10\26\15\0\15\26"+
    "\11\0\14\26\3\0\1\26\1\225\6\26\15\0\15\26"+
    "\11\0\6\26\1\226\5\26\3\0\10\26\15\0\15\26"+
    "\11\0\1\227\13\26\3\0\10\26\15\0\15\26\11\0"+
    "\6\26\1\230\5\26\3\0\10\26\15\0\15\26\1\231"+
    "\2\0\22\231\1\232\2\0\42\231\11\0\14\26\3\0"+
    "\2\26\1\233\5\26\15\0\15\26\11\0\14\26\3\0"+
    "\4\26\1\234\3\26\15\0\15\26\11\0\10\26\1\235"+
    "\3\26\3\0\10\26\15\0\15\26\11\0\14\26\3\0"+
    "\7\26\1\236\15\0\15\26\11\0\2\55\1\237\11\55"+
    "\3\0\10\55\15\0\15\55\11\0\6\55\1\240\5\55"+
    "\3\0\10\55\15\0\15\55\11\0\6\55\1\241\5\55"+
    "\3\0\10\55\15\0\15\55\11\0\2\61\1\242\11\61"+
    "\3\0\10\61\15\0\15\61\11\0\6\61\1\243\5\61"+
    "\3\0\10\61\15\0\15\61\11\0\6\61\1\244\5\61"+
    "\3\0\10\61\15\0\15\61\11\0\2\66\1\245\11\66"+
    "\3\0\10\66\15\0\15\66\11\0\6\66\1\246\5\66"+
    "\3\0\10\66\15\0\15\66\11\0\6\66\1\247\5\66"+
    "\3\0\10\66\15\0\15\66\11\0\2\72\1\250\11\72"+
    "\3\0\10\72\15\0\15\72\11\0\6\72\1\251\5\72"+
    "\3\0\10\72\15\0\15\72\11\0\6\72\1\252\5\72"+
    "\3\0\10\72\15\0\15\72\11\0\2\76\1\253\11\76"+
    "\3\0\10\76\15\0\15\76\11\0\6\76\1\254\5\76"+
    "\3\0\10\76\15\0\15\76\11\0\6\76\1\255\5\76"+
    "\3\0\10\76\15\0\15\76\11\0\2\102\1\256\11\102"+
    "\3\0\10\102\15\0\15\102\11\0\6\102\1\257\5\102"+
    "\3\0\10\102\15\0\15\102\11\0\6\102\1\260\5\102"+
    "\3\0\10\102\15\0\15\102\11\0\2\106\1\261\11\106"+
    "\3\0\10\106\15\0\15\106\11\0\6\106\1\262\5\106"+
    "\3\0\10\106\15\0\15\106\11\0\6\106\1\263\5\106"+
    "\3\0\10\106\15\0\15\106\11\0\2\112\1\264\11\112"+
    "\3\0\10\112\15\0\15\112\11\0\6\112\1\265\5\112"+
    "\3\0\10\112\15\0\15\112\11\0\6\112\1\266\5\112"+
    "\3\0\10\112\15\0\15\112\11\0\2\116\1\267\11\116"+
    "\3\0\10\116\15\0\15\116\11\0\6\116\1\270\5\116"+
    "\3\0\10\116\15\0\15\116\11\0\6\116\1\271\5\116"+
    "\3\0\10\116\15\0\15\116\11\0\1\116\1\272\12\116"+
    "\3\0\10\116\15\0\15\116\11\0\14\116\3\0\1\116"+
    "\1\273\6\116\15\0\15\116\11\0\1\274\13\116\3\0"+
    "\10\116\15\0\15\116\11\0\14\116\3\0\1\116\1\275"+
    "\6\116\15\0\15\116\11\0\1\276\13\116\3\0\10\116"+
    "\15\0\15\116\11\0\14\116\3\0\10\116\15\0\14\116"+
    "\1\277\11\0\2\130\1\300\11\130\3\0\10\130\15\0"+
    "\15\130\11\0\6\130\1\301\5\130\3\0\10\130\15\0"+
    "\15\130\11\0\6\130\1\302\5\130\3\0\10\130\15\0"+
    "\15\130\11\0\3\26\1\303\10\26\3\0\10\26\15\0"+
    "\15\26\11\0\14\26\3\0\4\26\1\304\3\26\15\0"+
    "\15\26\11\0\14\26\3\0\1\305\7\26\15\0\15\26"+
    "\11\0\14\26\3\0\1\306\7\26\15\0\15\26\11\0"+
    "\7\26\1\222\4\26\3\0\10\26\15\0\15\26\11\0"+
    "\6\26\1\307\5\26\3\0\10\26\15\0\15\26\1\231"+
    "\2\0\23\231\2\0\42\231\1\232\2\0\23\232\2\0"+
    "\42\232\11\0\3\26\1\310\10\26\3\0\10\26\15\0"+
    "\15\26\11\0\3\26\1\311\10\26\3\0\10\26\15\0"+
    "\15\26\11\0\4\26\1\312\3\26\1\313\3\26\3\0"+
    "\10\26\15\0\15\26\11\0\14\26\3\0\1\26\1\314"+
    "\6\26\15\0\15\26\11\0\3\55\1\315\10\55\3\0"+
    "\10\55\15\0\15\55\11\0\7\55\1\237\4\55\3\0"+
    "\10\55\15\0\15\55\11\0\6\55\1\316\5\55\3\0"+
    "\10\55\15\0\15\55\11\0\3\61\1\317\10\61\3\0"+
    "\10\61\15\0\15\61\11\0\7\61\1\242\4\61\3\0"+
    "\10\61\15\0\15\61\11\0\6\61\1\320\5\61\3\0"+
    "\10\61\15\0\15\61\11\0\3\66\1\321\10\66\3\0"+
    "\10\66\15\0\15\66\11\0\7\66\1\245\4\66\3\0"+
    "\10\66\15\0\15\66\11\0\6\66\1\322\5\66\3\0"+
    "\10\66\15\0\15\66\11\0\3\72\1\323\10\72\3\0"+
    "\10\72\15\0\15\72\11\0\7\72\1\250\4\72\3\0"+
    "\10\72\15\0\15\72\11\0\6\72\1\324\5\72\3\0"+
    "\10\72\15\0\15\72\11\0\3\76\1\325\10\76\3\0"+
    "\10\76\15\0\15\76\11\0\7\76\1\253\4\76\3\0"+
    "\10\76\15\0\15\76\11\0\6\76\1\326\5\76\3\0"+
    "\10\76\15\0\15\76\11\0\3\102\1\327\10\102\3\0"+
    "\10\102\15\0\15\102\11\0\7\102\1\256\4\102\3\0"+
    "\10\102\15\0\15\102\11\0\6\102\1\330\5\102\3\0"+
    "\10\102\15\0\15\102\11\0\3\106\1\331\10\106\3\0"+
    "\10\106\15\0\15\106\11\0\7\106\1\261\4\106\3\0"+
    "\10\106\15\0\15\106\11\0\6\106\1\332\5\106\3\0"+
    "\10\106\15\0\15\106\11\0\3\112\1\333\10\112\3\0"+
    "\10\112\15\0\15\112\11\0\7\112\1\264\4\112\3\0"+
    "\10\112\15\0\15\112\11\0\6\112\1\334\5\112\3\0"+
    "\10\112\15\0\15\112\11\0\3\116\1\335\10\116\3\0"+
    "\10\116\15\0\15\116\11\0\7\116\1\267\4\116\3\0"+
    "\10\116\15\0\15\116\11\0\6\116\1\336\5\116\3\0"+
    "\10\116\15\0\15\116\11\0\14\116\3\0\4\116\1\337"+
    "\3\116\15\0\15\116\11\0\6\116\1\340\5\116\3\0"+
    "\10\116\15\0\15\116\11\0\14\116\3\0\10\116\15\0"+
    "\3\116\1\341\1\116\1\342\7\116\11\0\5\116\1\211"+
    "\6\116\3\0\10\116\15\0\15\116\11\0\3\116\1\343"+
    "\10\116\3\0\10\116\15\0\15\116\11\0\3\116\1\344"+
    "\10\116\3\0\10\116\15\0\15\116\11\0\3\130\1\345"+
    "\10\130\3\0\10\130\15\0\15\130\11\0\7\130\1\300"+
    "\4\130\3\0\10\130\15\0\15\130\11\0\6\130\1\346"+
    "\5\130\3\0\10\130\15\0\15\130\11\0\1\347\13\26"+
    "\3\0\10\26\15\0\15\26\11\0\6\26\1\350\5\26"+
    "\3\0\10\26\15\0\15\26\11\0\10\26\1\351\3\26"+
    "\3\0\10\26\15\0\15\26\11\0\14\26\3\0\4\26"+
    "\1\352\3\26\15\0\15\26\11\0\3\26\1\353\10\26"+
    "\3\0\10\26\15\0\15\26\11\0\1\26\1\354\12\26"+
    "\3\0\10\26\15\0\15\26\11\0\10\116\1\355\3\116"+
    "\3\0\10\116\15\0\15\116\11\0\14\116\3\0\10\116"+
    "\15\0\4\116\1\340\10\116\11\0\14\116\3\0\10\116"+
    "\15\0\6\116\1\340\6\116\11\0\14\116\3\0\10\116"+
    "\15\0\11\116\1\356\3\116\11\0\14\116\3\0\3\116"+
    "\1\357\4\116\15\0\15\116\11\0\14\26\3\0\6\26"+
    "\1\360\1\26\15\0\15\26\11\0\1\361\13\26\3\0"+
    "\10\26\15\0\15\26\11\0\14\26\3\0\5\26\1\362"+
    "\2\26\15\0\15\26\11\0\14\26\3\0\3\26\1\363"+
    "\4\26\15\0\15\26\11\0\1\364\13\26\3\0\10\26"+
    "\15\0\15\26\11\0\14\116\3\0\5\116\1\340\2\116"+
    "\15\0\15\116\11\0\14\116\3\0\4\116\1\365\3\116"+
    "\15\0\15\116\11\0\1\366\13\116\3\0\10\116\15\0"+
    "\15\116\11\0\1\367\13\26\3\0\10\26\15\0\15\26"+
    "\11\0\14\116\3\0\1\370\7\116\15\0\15\116\11\0"+
    "\14\116\3\0\10\116\15\0\2\116\1\371\12\116\11\0"+
    "\14\26\3\0\1\26\1\372\6\26\15\0\15\26\11\0"+
    "\3\116\1\340\10\116\3\0\10\116\15\0\15\116\11\0"+
    "\14\116\3\0\2\116\1\340\5\116\15\0\15\116\11\0"+
    "\1\26\1\373\12\26\3\0\10\26\15\0\15\26";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11658];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\1\11\1\1\2\11\16\1\10\11\1\1\1\11"+
    "\1\1\2\11\57\1\1\11\2\0\14\1\2\11\45\1"+
    "\1\11\152\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    private Stack<Integer> stack = new Stack<Integer>();

    private Stack<Integer> blockStack = new Stack<Integer>();

    private boolean previousTokenIsIdentifier = false;

    public void yypushState(int newState) {
        System.out.format("CURRENT %s <<< ", stack.toString());
        System.out.format("will push %d\n", yystate());
        stack.push(newState);
        yybegin(newState);
    }

    public void yypushStateWhenDifferent(int newState) {
        if (yystate() != newState) {
            yypushState(newState);
        }
    }

    public void yypopState() {
        if (stack.empty()) {
            System.out.format("OVERPOP 1\n");
            yybegin(YYINITIAL);
        } else {
            System.out.format("CURRENT %s >>> ", stack.toString());
            int a = stack.pop();
            System.out.format("will pop %d\n", a);
            if (stack.empty()) {
                System.out.format("OVERPOP 2\n");
                yybegin(YYINITIAL);
            } else {
                yybegin(stack.peek());
            }
        }
    }

    public void yypopToState(int state) {
        if (yystate() == ENUM_MEMBER) {
            if (stack.empty()) {
                yybegin(YYINITIAL);
            } else {
                yybegin(stack.peek());
            }
        }
        if (yystate() == state) {
            yypopState();
        } else if (stack.empty()) {
            yypopToState(YYINITIAL);
        } else {
            yypopState();
            yypopToState(state);
        }
    }

    public _TeoLexer() {
        this((java.io.Reader)null);
        stack.push(YYINITIAL);
    }

    private void handleNewLine() {
        if ((yystate() == DECORATOR) || (yystate() == PPL)) {
            yypopState();
        }
        if (!blockStack.empty()) {
            if (blockStack.peek() == CONFIG) {
                if (yystate() == YYINITIAL) {
                    yybegin(CONFIG);
                }
            } else if (blockStack.peek() == MODEL) {
                if (yystate() == TYPE) {
                    yybegin(MODEL);
                }
            }
        }
    }

    private void handleWhiteSpace() {
        if (yystate() == DECORATOR) {
            yypopState();
        }
    }

    private void cancelDeclState() {
        if (yystate() == DECL) {
            yypopState();
        }
        if (yystate() == MODEL_DECL) {
            yypopState();
        }
        if (yystate() == ENUM_DECL) {
            yypopState();
        }
        if (yystate() == LET_DECL) {
            yypopState();
        }
        if (yystate() == CONFIG_DECL) {
            yypopState();
        }
    }

    private void pushBlock() {
        if (yystate() == ENUM_DECL) {
            blockStack.push(ENUM);
            cancelDeclState();
            yypushState(ENUM);
        } else if (yystate() == MODEL_DECL) {
            blockStack.push(MODEL);
            cancelDeclState();
            yypushState(MODEL);
        } else if (yystate() == CONFIG_DECL) {
            blockStack.push(CONFIG);
            cancelDeclState();
            yypushState(CONFIG);
        } else {
            blockStack.push(BLOCK);
            cancelDeclState();
            yypushState(BLOCK);
        }
    }

    private void yypopToCurrentBlock() {
        if (blockStack.peek() == ENUM) {
            yypopToState(ENUM);
            blockStack.pop();
        } else if (blockStack.peek() == MODEL) {
            yypopToState(MODEL);
            blockStack.pop();
        } else if (blockStack.peek() == CONFIG) {
            yypopToState(CONFIG);
            blockStack.pop();
        } else if (blockStack.peek() == BLOCK) {
            yypopToState(BLOCK);
            blockStack.pop();
        }
    }

    private void handleConfigItemDetected() {
        yybegin(YYINITIAL);
    }

    private void intoTypeMode() {
        if (yystate() == MODEL) {
            if (!blockStack.empty() && blockStack.peek() == MODEL) {
                yybegin(TYPE);
            }
        }
    }

    private void recordIdentifier() {
        previousTokenIsIdentifier = true;
    }

    private void recordNotIdentifier() {
        previousTokenIsIdentifier = false;
    }

    private void intoEnumMemberModeIfNeeded() {
        if (!previousTokenIsIdentifier) {
            yybegin(ENUM_MEMBER);
        }
    }

    private void cancelEnumMemberMode() {
        if (stack.empty()) {
            yybegin(YYINITIAL);
        } else {
            yybegin(stack.peek());
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _TeoLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(CharSequence str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = Character.codePointAt(str, n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [315] { return BAD_CHARACTER; }");
            { return BAD_CHARACTER;
            } 
            // fall through
          case 49: break;
          case 2: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [256] { cancelDeclState(); handleNewLine(); return EOL; }");
            { cancelDeclState(); handleNewLine(); return EOL;
            } 
            // fall through
          case 50: break;
          case 3: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [257] { handleWhiteSpace(); return WSC; }");
            { handleWhiteSpace(); return WSC;
            } 
            // fall through
          case 51: break;
          case 4: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [255] { recordIdentifier(); return STRING_LITERAL; }");
            { recordIdentifier(); return STRING_LITERAL;
            } 
            // fall through
          case 52: break;
          case 5: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [254] { recordIdentifier(); return NUMERIC_LITERAL; }");
            { recordIdentifier(); return NUMERIC_LITERAL;
            } 
            // fall through
          case 53: break;
          case 6: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [240] { intoEnumMemberModeIfNeeded(); return DOT; }");
            { intoEnumMemberModeIfNeeded(); return DOT;
            } 
            // fall through
          case 54: break;
          case 7: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [313] { recordIdentifier(); return IDENTIFIER; }");
            { recordIdentifier(); return IDENTIFIER;
            } 
            // fall through
          case 55: break;
          case 8: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [233] { pushBlock(); recordNotIdentifier(); return LBRACE; }");
            { pushBlock(); recordNotIdentifier(); return LBRACE;
            } 
            // fall through
          case 56: break;
          case 9: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [234] { recordIdentifier(); yypopToCurrentBlock(); return RBRACE; }");
            { recordIdentifier(); yypopToCurrentBlock(); return RBRACE;
            } 
            // fall through
          case 57: break;
          case 10: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [235] { yypushState(YYINITIAL); recordNotIdentifier(); return LPAREN; }");
            { yypushState(YYINITIAL); recordNotIdentifier(); return LPAREN;
            } 
            // fall through
          case 58: break;
          case 11: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [236] { recordIdentifier(); yypopToState(YYINITIAL); return RPAREN; }");
            { recordIdentifier(); yypopToState(YYINITIAL); return RPAREN;
            } 
            // fall through
          case 59: break;
          case 12: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [237] { yypushState(YYINITIAL); recordNotIdentifier(); return LBRACKET; }");
            { yypushState(YYINITIAL); recordNotIdentifier(); return LBRACKET;
            } 
            // fall through
          case 60: break;
          case 13: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [238] { yypopToState(YYINITIAL); recordIdentifier(); return RBRACKET; }");
            { yypopToState(YYINITIAL); recordIdentifier(); return RBRACKET;
            } 
            // fall through
          case 61: break;
          case 14: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [239] { cancelDeclState(); recordNotIdentifier(); return EQ; }");
            { cancelDeclState(); recordNotIdentifier(); return EQ;
            } 
            // fall through
          case 62: break;
          case 15: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [241] { intoTypeMode(); recordNotIdentifier(); return COLON; }");
            { intoTypeMode(); recordNotIdentifier(); return COLON;
            } 
            // fall through
          case 63: break;
          case 16: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [243] { recordNotIdentifier(); return QM; }");
            { recordNotIdentifier(); return QM;
            } 
            // fall through
          case 64: break;
          case 17: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [244] { recordNotIdentifier(); return EXCL; }");
            { recordNotIdentifier(); return EXCL;
            } 
            // fall through
          case 65: break;
          case 18: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [246] { yypushStateWhenDifferent(DECORATOR); recordNotIdentifier(); return AT; }");
            { yypushStateWhenDifferent(DECORATOR); recordNotIdentifier(); return AT;
            } 
            // fall through
          case 66: break;
          case 19: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [247] { recordNotIdentifier(); return COMMA; }");
            { recordNotIdentifier(); return COMMA;
            } 
            // fall through
          case 67: break;
          case 20: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [250] { yypushState(PPL); recordNotIdentifier(); return DOLLAR; }");
            { yypushState(PPL); recordNotIdentifier(); return DOLLAR;
            } 
            // fall through
          case 68: break;
          case 21: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [263] { recordIdentifier(); return DECO_IDENTIFIER; }");
            { recordIdentifier(); return DECO_IDENTIFIER;
            } 
            // fall through
          case 69: break;
          case 22: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [267] { recordIdentifier(); return PPL_IDENTIFIER; }");
            { recordIdentifier(); return PPL_IDENTIFIER;
            } 
            // fall through
          case 70: break;
          case 23: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [283] { recordIdentifier(); return ENUM_IDENTIFIER; }");
            { recordIdentifier(); return ENUM_IDENTIFIER;
            } 
            // fall through
          case 71: break;
          case 24: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [275] { recordIdentifier(); return ENUM_NAME; }");
            { recordIdentifier(); return ENUM_NAME;
            } 
            // fall through
          case 72: break;
          case 25: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [291] { recordIdentifier(); return FIELD_NAME; }");
            { recordIdentifier(); return FIELD_NAME;
            } 
            // fall through
          case 73: break;
          case 26: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [271] { recordIdentifier(); return MODEL_NAME; }");
            { recordIdentifier(); return MODEL_NAME;
            } 
            // fall through
          case 74: break;
          case 27: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [287] { recordNotIdentifier(); handleConfigItemDetected(); return CONFIG_ITEM_NAME; }");
            { recordNotIdentifier(); handleConfigItemDetected(); return CONFIG_ITEM_NAME;
            } 
            // fall through
          case 75: break;
          case 28: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [279] { recordIdentifier(); return CONFIG_NAME; }");
            { recordIdentifier(); return CONFIG_NAME;
            } 
            // fall through
          case 76: break;
          case 29: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [310] { return USER_TYPE; }");
            { return USER_TYPE;
            } 
            // fall through
          case 77: break;
          case 30: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [295] { recordIdentifier(); cancelEnumMemberMode(); return ENUM_MEMBER_NAME; }");
            { recordIdentifier(); cancelEnumMemberMode(); return ENUM_MEMBER_NAME;
            } 
            // fall through
          case 78: break;
          case 31: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [249] { recordNotIdentifier(); return ORANGE; }");
            { recordNotIdentifier(); return ORANGE;
            } 
            // fall through
          case 79: break;
          case 32: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [260] { recordNotIdentifier(); return LINE_COMMENT; }");
            { recordNotIdentifier(); return LINE_COMMENT;
            } 
            // fall through
          case 80: break;
          case 33: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [242] { recordNotIdentifier(); return QMQM; }");
            { recordNotIdentifier(); return QMQM;
            } 
            // fall through
          case 81: break;
          case 34: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [245] { yypushStateWhenDifferent(DECORATOR); recordNotIdentifier(); return ATAT; }");
            { yypushStateWhenDifferent(DECORATOR); recordNotIdentifier(); return ATAT;
            } 
            // fall through
          case 82: break;
          case 35: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [248] { recordNotIdentifier(); return CRANGE; }");
            { recordNotIdentifier(); return CRANGE;
            } 
            // fall through
          case 83: break;
          case 36: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [230] { yybegin(LET_DECL); recordNotIdentifier(); return LET_KEYWORD; }");
            { yybegin(LET_DECL); recordNotIdentifier(); return LET_KEYWORD;
            } 
            // fall through
          case 84: break;
          case 37: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [259] { recordNotIdentifier(); return DOC_COMMENT; }");
            { recordNotIdentifier(); return DOC_COMMENT;
            } 
            // fall through
          case 85: break;
          case 38: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [301] { return BUILTIN_TYPE; }");
            { return BUILTIN_TYPE;
            } 
            // fall through
          case 86: break;
          case 39: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [253] { recordIdentifier(); return BOOL_LITERAL; }");
            { recordIdentifier(); return BOOL_LITERAL;
            } 
            // fall through
          case 87: break;
          case 40: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [223] { yybegin(ENUM_DECL); recordNotIdentifier(); return ENUM_KEYWORD; }");
            { yybegin(ENUM_DECL); recordNotIdentifier(); return ENUM_KEYWORD;
            } 
            // fall through
          case 88: break;
          case 41: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [229] { recordNotIdentifier(); return FROM_KEYWORD; }");
            { recordNotIdentifier(); return FROM_KEYWORD;
            } 
            // fall through
          case 89: break;
          case 42: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [252] { recordIdentifier(); return NULL_LITERAL; }");
            { recordIdentifier(); return NULL_LITERAL;
            } 
            // fall through
          case 90: break;
          case 43: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [222] { yybegin(MODEL_DECL); recordNotIdentifier(); return MODEL_KEYWORD; }");
            { yybegin(MODEL_DECL); recordNotIdentifier(); return MODEL_KEYWORD;
            } 
            // fall through
          case 91: break;
          case 44: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [227] { yybegin(CONFIG_DECL); recordNotIdentifier(); return ENTITY_KEYWORD; }");
            { yybegin(CONFIG_DECL); recordNotIdentifier(); return ENTITY_KEYWORD;
            } 
            // fall through
          case 92: break;
          case 45: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [226] { yybegin(CONFIG_DECL); recordNotIdentifier(); return CLIENT_KEYWORD; }");
            { yybegin(CONFIG_DECL); recordNotIdentifier(); return CLIENT_KEYWORD;
            } 
            // fall through
          case 93: break;
          case 46: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [224] { yybegin(CONFIG_DECL); recordNotIdentifier(); return CONFIG_KEYWORD; }");
            { yybegin(CONFIG_DECL); recordNotIdentifier(); return CONFIG_KEYWORD;
            } 
            // fall through
          case 94: break;
          case 47: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [228] { recordNotIdentifier(); return IMPORT_KEYWORD; }");
            { recordNotIdentifier(); return IMPORT_KEYWORD;
            } 
            // fall through
          case 95: break;
          case 48: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [225] { yybegin(CONFIG_DECL); recordNotIdentifier(); return CONNECTOR_KEYWORD; }");
            { yybegin(CONFIG_DECL); recordNotIdentifier(); return CONNECTOR_KEYWORD;
            } 
            // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java _TeoLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        _TeoLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new _TeoLexer(reader);
          do {
            System.out.println(scanner.advance());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
