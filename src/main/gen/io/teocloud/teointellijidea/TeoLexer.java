/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package io.teocloud.teointellijidea;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static io.teocloud.teointellijidea.psi.TeoTypes.*;
import static com.intellij.psi.TokenType.*;
import com.intellij.openapi.util.text.StringUtil;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Teo.flex</tt>
 */
class TeoLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DECORATOR = 2;
  public static final int PPL = 4;
  public static final int BLOCK = 6;
  public static final int DECL = 8;
  public static final int ENUM = 10;
  public static final int ENUM_DECL = 12;
  public static final int MODEL = 14;
  public static final int MODEL_DECL = 16;
  public static final int LET_DECL = 18;
  public static final int CONFIG = 20;
  public static final int CONFIG_DECL = 22;
  public static final int TYPE = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  3,  3,  4,  4,  5,  5,  6,  6, 
     7,  7,  3,  3,  8,  8,  9,  9, 10, 10
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 3872 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>12]<<6)|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\7\3\1\4\4\3\1\5\1\6\1\7\4\3\1\10\6\3\1\11\1\12\361\3");

  /* The ZZ_CMAP_Y table has 704 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\26\3\1\4\1\3\1\5\3\3\1\6\5\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\10\1\3\1\10\1\4\4\3\1\6"+
    "\1\10\34\3\1\4\1\10\4\3\1\11\1\3\1\10\2\3\1\12\2\3\1\10\1\5\2\3\1\12\16\3"+
    "\1\13\227\3\1\4\12\3\1\10\1\6\2\3\1\14\1\3\1\10\5\3\1\5\114\3\1\10\25\3\1"+
    "\4\56\3\1\7\1\3\1\5\1\15\2\3\1\10\3\3\1\5\5\3\1\10\1\3\1\10\5\3\1\10\1\3\1"+
    "\6\1\5\6\3\1\4\15\3\1\10\67\3\1\4\3\3\1\10\61\3\1\16\105\3\1\10\32\3");

  /* The ZZ_CMAP_A table has 960 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\26\1\27\1\1\22\0\1\3\1\51\1\4\1\0\1\54\3\0\1\42\1\43\2\0\1"+
    "\53\1\7\1\10\1\25\12\24\1\47\2\0\1\46\1\0\1\50\1\52\32\22\1\44\1\5\1\45\1"+
    "\0\1\23\1\0\1\16\1\22\1\33\1\32\1\14\1\15\1\35\1\22\1\34\2\22\1\17\1\30\1"+
    "\21\1\31\1\37\1\22\1\12\1\20\1\11\1\13\3\22\1\36\1\22\1\40\1\0\1\41\7\0\1"+
    "\26\232\0\12\6\106\0\12\6\6\0\12\6\134\0\12\6\40\0\12\6\54\0\12\6\60\0\12"+
    "\6\6\0\12\6\116\0\2\26\46\0\12\6\26\0\12\6\74\0\12\6\16\0\62\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\2\2\1\3\1\4\1\5\1\1\1\6"+
    "\6\7\1\1\3\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\4\25\4\26\1\7\4\27\4\30\4\31\4\32\4\33"+
    "\4\34\4\35\1\4\2\0\1\36\6\7\1\37\4\7"+
    "\1\40\1\41\3\25\3\26\3\27\3\30\3\31\3\32"+
    "\3\33\3\34\3\35\1\5\1\42\5\7\1\43\1\7"+
    "\1\37\1\44\4\7\3\25\3\26\3\27\3\30\3\31"+
    "\3\32\3\33\3\34\3\35\1\45\1\7\1\46\1\47"+
    "\1\50\5\7\1\45\1\50\1\45\1\50\1\45\1\50"+
    "\1\45\1\50\1\45\1\50\1\45\1\50\1\45\1\50"+
    "\1\45\1\50\1\45\1\50\1\7\1\51\4\7\1\52"+
    "\1\53\1\54\1\7\1\55\2\7\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u01ef\0\u01ef\0\u0249"+
    "\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1"+
    "\0\u03de\0\u040b\0\u0438\0\u0465\0\u0492\0\u01ef\0\u01ef\0\u01ef"+
    "\0\u01ef\0\u01ef\0\u01ef\0\u01ef\0\u01ef\0\u04bf\0\u01ef\0\u04ec"+
    "\0\u01ef\0\u01ef\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa"+
    "\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762"+
    "\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca"+
    "\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32"+
    "\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u01ef"+
    "\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5"+
    "\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u01ef\0\u01ef"+
    "\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b"+
    "\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3"+
    "\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b"+
    "\0\u1248\0\u1275\0\u12a2\0\u0bc7\0\u01ef\0\u12cf\0\u12fc\0\u1329"+
    "\0\u1356\0\u1383\0\u032a\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464"+
    "\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc"+
    "\0\u15f9\0\u1626\0\u1653\0\u1680\0\u16ad\0\u16da\0\u1707\0\u1734"+
    "\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842\0\u186f\0\u189c"+
    "\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u197d\0\u032a\0\u19aa\0\u032a"+
    "\0\u032a\0\u032a\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u0546"+
    "\0\u0546\0\u05fa\0\u05fa\0\u06db\0\u06db\0\u078f\0\u078f\0\u0843"+
    "\0\u0843\0\u08f7\0\u08f7\0\u09ab\0\u09ab\0\u0a5f\0\u0a5f\0\u0b13"+
    "\0\u0b13\0\u1ab8\0\u032a\0\u1ae5\0\u1b12\0\u1b3f\0\u1b6c\0\u032a"+
    "\0\u032a\0\u032a\0\u1b99\0\u032a\0\u1bc6\0\u1bf3\0\u032a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\1\15\1\16\1\17\1\20\1\14\1\21\1\22"+
    "\1\23\1\24\2\25\1\26\1\27\1\25\1\30\1\25"+
    "\1\31\1\25\1\14\1\21\1\32\1\14\1\17\1\33"+
    "\2\25\1\34\1\35\3\25\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\14\1\15\1\16\1\17\1\20\1\14\1\21"+
    "\1\22\1\23\1\53\3\54\1\55\3\54\1\56\1\54"+
    "\1\14\1\21\1\32\1\14\1\17\10\54\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\14\1\15\1\16\1\17\1\20"+
    "\1\14\1\21\1\22\1\23\1\57\3\60\1\61\3\60"+
    "\1\62\1\60\1\14\1\21\1\32\1\14\1\17\10\60"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\14\1\15\1\16"+
    "\1\17\1\20\1\14\1\21\1\22\1\23\1\24\3\25"+
    "\1\63\3\25\1\31\1\25\1\14\1\21\1\32\1\14"+
    "\1\17\10\25\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\14"+
    "\1\15\1\16\1\17\1\20\1\14\1\21\1\22\1\23"+
    "\1\64\3\65\1\66\3\65\1\67\1\65\1\14\1\21"+
    "\1\32\1\14\1\17\10\65\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\14\1\15\1\16\1\17\1\20\1\14\1\21"+
    "\1\22\1\23\1\70\3\71\1\72\3\71\1\73\1\71"+
    "\1\14\1\21\1\32\1\14\1\17\10\71\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\14\1\15\1\16\1\17\1\20"+
    "\1\14\1\21\1\22\1\23\1\74\3\75\1\76\3\75"+
    "\1\77\1\75\1\14\1\21\1\32\1\14\1\17\10\75"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\14\1\15\1\16"+
    "\1\17\1\20\1\14\1\21\1\22\1\23\1\100\3\101"+
    "\1\102\3\101\1\103\1\101\1\14\1\21\1\32\1\14"+
    "\1\17\10\101\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\14"+
    "\1\15\1\16\1\17\1\20\1\14\1\21\1\22\1\23"+
    "\1\104\3\105\1\106\3\105\1\107\1\105\1\14\1\21"+
    "\1\32\1\14\1\17\10\105\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\14\1\15\1\16\1\17\1\20\1\14\1\21"+
    "\1\22\1\23\1\110\3\111\1\112\3\111\1\113\1\111"+
    "\1\14\1\21\1\32\1\14\1\17\10\111\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\14\1\15\1\16\1\17\1\20"+
    "\1\14\1\21\1\22\1\23\1\114\3\115\1\116\3\115"+
    "\1\117\1\115\1\14\1\21\1\32\1\14\1\17\10\115"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\57\0\1\16\52\0"+
    "\1\20\2\0\1\20\1\120\1\121\47\20\6\0\1\21"+
    "\1\0\1\122\13\0\1\21\36\0\1\21\15\0\1\21"+
    "\40\0\1\123\55\0\1\25\1\124\12\25\3\0\10\25"+
    "\26\0\14\25\3\0\10\25\26\0\10\25\1\125\3\25"+
    "\3\0\10\25\26\0\1\25\1\126\3\25\1\127\6\25"+
    "\3\0\10\25\26\0\3\25\1\130\10\25\3\0\10\25"+
    "\26\0\2\25\1\131\11\25\3\0\10\25\42\0\1\132"+
    "\40\0\14\25\3\0\1\25\1\133\6\25\26\0\6\25"+
    "\1\134\5\25\3\0\1\25\1\135\6\25\26\0\14\25"+
    "\3\0\1\136\7\25\65\0\1\137\56\0\1\140\13\0"+
    "\1\54\1\141\12\54\3\0\10\54\26\0\14\54\3\0"+
    "\10\54\26\0\5\54\1\142\6\54\3\0\10\54\26\0"+
    "\2\54\1\143\11\54\3\0\10\54\26\0\1\60\1\144"+
    "\12\60\3\0\10\60\26\0\14\60\3\0\10\60\26\0"+
    "\5\60\1\145\6\60\3\0\10\60\26\0\2\60\1\146"+
    "\11\60\3\0\10\60\26\0\5\25\1\127\6\25\3\0"+
    "\10\25\26\0\1\65\1\147\12\65\3\0\10\65\26\0"+
    "\14\65\3\0\10\65\26\0\5\65\1\150\6\65\3\0"+
    "\10\65\26\0\2\65\1\151\11\65\3\0\10\65\26\0"+
    "\1\71\1\152\12\71\3\0\10\71\26\0\14\71\3\0"+
    "\10\71\26\0\5\71\1\153\6\71\3\0\10\71\26\0"+
    "\2\71\1\154\11\71\3\0\10\71\26\0\1\75\1\155"+
    "\12\75\3\0\10\75\26\0\14\75\3\0\10\75\26\0"+
    "\5\75\1\156\6\75\3\0\10\75\26\0\2\75\1\157"+
    "\11\75\3\0\10\75\26\0\1\101\1\160\12\101\3\0"+
    "\10\101\26\0\14\101\3\0\10\101\26\0\5\101\1\161"+
    "\6\101\3\0\10\101\26\0\2\101\1\162\11\101\3\0"+
    "\10\101\26\0\1\105\1\163\12\105\3\0\10\105\26\0"+
    "\14\105\3\0\10\105\26\0\5\105\1\164\6\105\3\0"+
    "\10\105\26\0\2\105\1\165\11\105\3\0\10\105\26\0"+
    "\1\111\1\166\12\111\3\0\10\111\26\0\14\111\3\0"+
    "\10\111\26\0\5\111\1\167\6\111\3\0\10\111\26\0"+
    "\2\111\1\170\11\111\3\0\10\111\26\0\1\115\1\171"+
    "\12\115\3\0\10\115\26\0\14\115\3\0\10\115\26\0"+
    "\5\115\1\172\6\115\3\0\10\115\26\0\2\115\1\173"+
    "\11\115\3\0\10\115\15\0\1\20\2\0\52\20\6\0"+
    "\1\174\15\0\1\174\40\0\1\175\55\0\2\25\1\176"+
    "\11\25\3\0\10\25\26\0\1\177\1\25\1\200\11\25"+
    "\3\0\10\25\26\0\14\25\3\0\1\25\1\201\6\25"+
    "\26\0\6\25\1\202\5\25\3\0\10\25\26\0\1\203"+
    "\13\25\3\0\10\25\26\0\6\25\1\204\5\25\3\0"+
    "\10\25\15\0\1\205\2\0\22\205\1\206\2\0\25\205"+
    "\11\0\14\25\3\0\2\25\1\207\5\25\26\0\14\25"+
    "\3\0\4\25\1\210\3\25\26\0\10\25\1\211\3\25"+
    "\3\0\10\25\26\0\14\25\3\0\7\25\1\212\26\0"+
    "\2\54\1\213\11\54\3\0\10\54\26\0\6\54\1\214"+
    "\5\54\3\0\10\54\26\0\6\54\1\215\5\54\3\0"+
    "\10\54\26\0\2\60\1\216\11\60\3\0\10\60\26\0"+
    "\6\60\1\217\5\60\3\0\10\60\26\0\6\60\1\220"+
    "\5\60\3\0\10\60\26\0\2\65\1\221\11\65\3\0"+
    "\10\65\26\0\6\65\1\222\5\65\3\0\10\65\26\0"+
    "\6\65\1\223\5\65\3\0\10\65\26\0\2\71\1\224"+
    "\11\71\3\0\10\71\26\0\6\71\1\225\5\71\3\0"+
    "\10\71\26\0\6\71\1\226\5\71\3\0\10\71\26\0"+
    "\2\75\1\227\11\75\3\0\10\75\26\0\6\75\1\230"+
    "\5\75\3\0\10\75\26\0\6\75\1\231\5\75\3\0"+
    "\10\75\26\0\2\101\1\232\11\101\3\0\10\101\26\0"+
    "\6\101\1\233\5\101\3\0\10\101\26\0\6\101\1\234"+
    "\5\101\3\0\10\101\26\0\2\105\1\235\11\105\3\0"+
    "\10\105\26\0\6\105\1\236\5\105\3\0\10\105\26\0"+
    "\6\105\1\237\5\105\3\0\10\105\26\0\2\111\1\240"+
    "\11\111\3\0\10\111\26\0\6\111\1\241\5\111\3\0"+
    "\10\111\26\0\6\111\1\242\5\111\3\0\10\111\26\0"+
    "\2\115\1\243\11\115\3\0\10\115\26\0\6\115\1\244"+
    "\5\115\3\0\10\115\26\0\6\115\1\245\5\115\3\0"+
    "\10\115\26\0\3\25\1\246\10\25\3\0\10\25\26\0"+
    "\14\25\3\0\4\25\1\247\3\25\26\0\14\25\3\0"+
    "\1\250\7\25\26\0\14\25\3\0\1\251\7\25\26\0"+
    "\7\25\1\176\4\25\3\0\10\25\26\0\6\25\1\252"+
    "\5\25\3\0\10\25\15\0\1\205\2\0\23\205\2\0"+
    "\25\205\1\206\2\0\23\206\2\0\25\206\11\0\3\25"+
    "\1\253\10\25\3\0\10\25\26\0\3\25\1\254\10\25"+
    "\3\0\10\25\26\0\4\25\1\255\3\25\1\256\3\25"+
    "\3\0\10\25\26\0\14\25\3\0\1\25\1\257\6\25"+
    "\26\0\3\54\1\260\10\54\3\0\10\54\26\0\7\54"+
    "\1\213\4\54\3\0\10\54\26\0\6\54\1\261\5\54"+
    "\3\0\10\54\26\0\3\60\1\262\10\60\3\0\10\60"+
    "\26\0\7\60\1\216\4\60\3\0\10\60\26\0\6\60"+
    "\1\263\5\60\3\0\10\60\26\0\3\65\1\264\10\65"+
    "\3\0\10\65\26\0\7\65\1\221\4\65\3\0\10\65"+
    "\26\0\6\65\1\265\5\65\3\0\10\65\26\0\3\71"+
    "\1\266\10\71\3\0\10\71\26\0\7\71\1\224\4\71"+
    "\3\0\10\71\26\0\6\71\1\267\5\71\3\0\10\71"+
    "\26\0\3\75\1\270\10\75\3\0\10\75\26\0\7\75"+
    "\1\227\4\75\3\0\10\75\26\0\6\75\1\271\5\75"+
    "\3\0\10\75\26\0\3\101\1\272\10\101\3\0\10\101"+
    "\26\0\7\101\1\232\4\101\3\0\10\101\26\0\6\101"+
    "\1\273\5\101\3\0\10\101\26\0\3\105\1\274\10\105"+
    "\3\0\10\105\26\0\7\105\1\235\4\105\3\0\10\105"+
    "\26\0\6\105\1\275\5\105\3\0\10\105\26\0\3\111"+
    "\1\276\10\111\3\0\10\111\26\0\7\111\1\240\4\111"+
    "\3\0\10\111\26\0\6\111\1\277\5\111\3\0\10\111"+
    "\26\0\3\115\1\300\10\115\3\0\10\115\26\0\7\115"+
    "\1\243\4\115\3\0\10\115\26\0\6\115\1\301\5\115"+
    "\3\0\10\115\26\0\1\302\13\25\3\0\10\25\26\0"+
    "\6\25\1\303\5\25\3\0\10\25\26\0\10\25\1\304"+
    "\3\25\3\0\10\25\26\0\14\25\3\0\4\25\1\305"+
    "\3\25\26\0\3\25\1\306\10\25\3\0\10\25\26\0"+
    "\1\25\1\307\12\25\3\0\10\25\26\0\14\25\3\0"+
    "\6\25\1\310\1\25\26\0\1\311\13\25\3\0\10\25"+
    "\26\0\14\25\3\0\5\25\1\312\2\25\26\0\14\25"+
    "\3\0\3\25\1\313\4\25\26\0\1\314\13\25\3\0"+
    "\10\25\26\0\1\315\13\25\3\0\10\25\26\0\14\25"+
    "\3\0\1\25\1\316\6\25\26\0\1\25\1\317\12\25"+
    "\3\0\10\25\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\11\1\1\2\11\16\1\10\11\1\1\1\11"+
    "\1\1\2\11\45\1\1\11\2\0\14\1\2\11\34\1"+
    "\1\11\122\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    private Stack<Integer> stack = new Stack<Integer>(){};

    private Stack<Integer> blockStack = new Stack<Integer>();

    public void yypushState(int newState) {
        stack.push(yystate());
        yybegin(newState);
    }

    public void yypushStateWhenDifferent(int newState) {
        if (yystate() != newState) {
            yypushState(newState);
        }
    }

    public void yypopState() {
        if (stack.empty()) {
            System.out.format("will just be initial\n");
            yybegin(YYINITIAL);
        } else {
            System.out.format("SEE CURRENT STATE %s  -- ", stack.toString());
            int a = stack.pop();
            System.out.format("will pop %d\n", a);
            yybegin(a);
        }
    }

    public void yypopToState(int state) {
        if (yystate() == state) {
            yypopState();
        } else if (stack.empty()) {
            yypopToState(YYINITIAL);
        } else {
            yypopState();
            yypopToState(state);
        }
    }

    public TeoLexer() {
        this((java.io.Reader)null);
    }

    private void handleNewLine() {
        if ((yystate() == DECORATOR) || (yystate() == PPL)) {
            yypopState();
        }
        if (!blockStack.empty()) {
            if (blockStack.peek() == CONFIG) {
                if (yystate() == YYINITIAL) {
                    yybegin(CONFIG);
                }
            } else if (blockStack.peek() == MODEL) {
                if (yystate() == TYPE) {
                    yybegin(MODEL);
                }
            }
        }
    }

    private void handleWhiteSpace() {
        if (yystate() == DECORATOR) {
            yypopState();
        }
    }

    private void cancelDeclState() {
        if (yystate() == DECL) {
            yypopState();
        }
        if (yystate() == MODEL_DECL) {
            yypopState();
        }
        if (yystate() == ENUM_DECL) {
            yypopState();
        }
        if (yystate() == LET_DECL) {
            yypopState();
        }
        if (yystate() == CONFIG_DECL) {
            yypopState();
        }
    }

    private void pushBlock() {
        if (yystate() == ENUM_DECL) {
            blockStack.push(ENUM);
            cancelDeclState();
            yypushState(ENUM);
        } else if (yystate() == MODEL_DECL) {
            blockStack.push(MODEL);
            cancelDeclState();
            yypushState(MODEL);
        } else if (yystate() == CONFIG_DECL) {
            blockStack.push(CONFIG);
            cancelDeclState();
            yypushState(CONFIG);
        } else {
            blockStack.push(BLOCK);
            cancelDeclState();
            yypushState(BLOCK);
        }
    }

    private void yypopToCurrentBlock() {
        if (blockStack.peek() == ENUM) {
            yypopToState(ENUM);
            blockStack.pop();
        } else if (blockStack.peek() == MODEL) {
            yypopToState(MODEL);
            blockStack.pop();
        } else if (blockStack.peek() == CONFIG) {
            yypopToState(CONFIG);
            blockStack.pop();
        } else if (blockStack.peek() == BLOCK) {
            yypopToState(BLOCK);
            blockStack.pop();
        }
    }

    private void handleConfigItemDetected() {
        yybegin(YYINITIAL);
    }

    private void intoTypeMode() {
        if (yystate() == MODEL) {
            if (!blockStack.empty() && blockStack.peek() == MODEL) {
                yybegin(TYPE);
            }
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TeoLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 47: break;
          case 2: 
            { cancelDeclState(); handleNewLine(); return EOL;
            } 
            // fall through
          case 48: break;
          case 3: 
            { handleWhiteSpace(); return WSC;
            } 
            // fall through
          case 49: break;
          case 4: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 50: break;
          case 5: 
            { return NUMERIC_LITERAL;
            } 
            // fall through
          case 51: break;
          case 6: 
            { return DOT;
            } 
            // fall through
          case 52: break;
          case 7: 
            { return IDENTIFIER;
            } 
            // fall through
          case 53: break;
          case 8: 
            { pushBlock(); return LBRACE;
            } 
            // fall through
          case 54: break;
          case 9: 
            { yypopToCurrentBlock(); return RBRACE;
            } 
            // fall through
          case 55: break;
          case 10: 
            { yypushState(YYINITIAL); return LPAREN;
            } 
            // fall through
          case 56: break;
          case 11: 
            { yypopToState(YYINITIAL); return RPAREN;
            } 
            // fall through
          case 57: break;
          case 12: 
            { yypushState(YYINITIAL); return LBRACKET;
            } 
            // fall through
          case 58: break;
          case 13: 
            { yypopToState(YYINITIAL); return RBRACKET;
            } 
            // fall through
          case 59: break;
          case 14: 
            { cancelDeclState(); return EQ;
            } 
            // fall through
          case 60: break;
          case 15: 
            { intoTypeMode(); return COLON;
            } 
            // fall through
          case 61: break;
          case 16: 
            { return QM;
            } 
            // fall through
          case 62: break;
          case 17: 
            { return EXCL;
            } 
            // fall through
          case 63: break;
          case 18: 
            { yypushStateWhenDifferent(DECORATOR); return AT;
            } 
            // fall through
          case 64: break;
          case 19: 
            { return COMMA;
            } 
            // fall through
          case 65: break;
          case 20: 
            { yypushState(PPL); return DOLLAR;
            } 
            // fall through
          case 66: break;
          case 21: 
            { return DECO_IDENTIFIER;
            } 
            // fall through
          case 67: break;
          case 22: 
            { return PPL_IDENTIFIER;
            } 
            // fall through
          case 68: break;
          case 23: 
            { return ENUM_IDENTIFIER;
            } 
            // fall through
          case 69: break;
          case 24: 
            { return ENUM_NAME;
            } 
            // fall through
          case 70: break;
          case 25: 
            { return FIELD_NAME;
            } 
            // fall through
          case 71: break;
          case 26: 
            { return MODEL_NAME;
            } 
            // fall through
          case 72: break;
          case 27: 
            { handleConfigItemDetected(); return CONFIG_ITEM_NAME;
            } 
            // fall through
          case 73: break;
          case 28: 
            { return CONFIG_NAME;
            } 
            // fall through
          case 74: break;
          case 29: 
            { return FIELD_TYPE_BASE;
            } 
            // fall through
          case 75: break;
          case 30: 
            { return ORANGE;
            } 
            // fall through
          case 76: break;
          case 31: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 77: break;
          case 32: 
            { return QMQM;
            } 
            // fall through
          case 78: break;
          case 33: 
            { yypushStateWhenDifferent(DECORATOR); return ATAT;
            } 
            // fall through
          case 79: break;
          case 34: 
            { return CRANGE;
            } 
            // fall through
          case 80: break;
          case 35: 
            { yybegin(LET_DECL); return LET_KEYWORD;
            } 
            // fall through
          case 81: break;
          case 36: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 82: break;
          case 37: 
            { return BOOL_LITERAL;
            } 
            // fall through
          case 83: break;
          case 38: 
            { yybegin(ENUM_DECL); return ENUM_KEYWORD;
            } 
            // fall through
          case 84: break;
          case 39: 
            { return FROM_KEYWORD;
            } 
            // fall through
          case 85: break;
          case 40: 
            { return NULL_LITERAL;
            } 
            // fall through
          case 86: break;
          case 41: 
            { yybegin(MODEL_DECL); return MODEL_KEYWORD;
            } 
            // fall through
          case 87: break;
          case 42: 
            { yybegin(CONFIG_DECL); return ENTITY_KEYWORD;
            } 
            // fall through
          case 88: break;
          case 43: 
            { yybegin(CONFIG_DECL); return CLIENT_KEYWORD;
            } 
            // fall through
          case 89: break;
          case 44: 
            { yybegin(CONFIG_DECL); return CONFIG_KEYWORD;
            } 
            // fall through
          case 90: break;
          case 45: 
            { return IMPORT_KEYWORD;
            } 
            // fall through
          case 91: break;
          case 46: 
            { yybegin(CONFIG_DECL); return CONNECTOR_KEYWORD;
            } 
            // fall through
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
