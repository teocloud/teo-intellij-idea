{
  parserClass="io.teocloud.teointellijidea.parser.TeoParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Teo"
  psiImplClassSuffix="Impl"
  psiPackage="io.teocloud.teointellijidea.psi"
  psiImplPackage="io.teocloud.teointellijidea.psi.impl"

  elementTypeHolderClass="io.teocloud.teointellijidea.psi.TeoTypes"
  elementTypeClass="io.teocloud.teointellijidea.lang.psi.TeoElementType"
  tokenTypeClass="io.teocloud.teointellijidea.lang.psi.TeoTokenType"

  psiImplUtilClass="io.teocloud.teointellijidea.lang.psi.impl.TeoPsiImplUtil"

  implements('(model_|enum_|config_)definition|let_declaration')='io.teocloud.teointellijidea.lang.psi.TeoDeclaration'
  mixin('(model_|enum_|config_)definition|let_declaration')='io.teocloud.teointellijidea.lang.psi.impl.TeoDeclarationMixin'
}

teoFile ::= item_*

private item_ ::= (import_statement|let_declaration|model_definition|enum_definition|config_definition|comment|bad_doc_comment|EOL|WSC|EXCL|CRANGE|ORANGE|bad_top_identifier|bad_top_decorator)

EOL_WSC ::= EOL | WSC
WS ::= EOL_WSC+

bad_top_identifier ::= IDENTIFIER

bad_top_decorator ::= AT identifier_unit

private padded_comma ::= WS? COMMA WS?
private padded_colon ::= WS? COLON WS?
private padded_lbrace ::= LBRACE WS?
private padded_rbrace ::= WS? RBRACE
private padded_lbracket ::= LBRACKET WS?
private padded_rbracket ::= WS? RBRACKET
private padded_lparen ::= LPAREN WS?
private padded_rparen ::= WS? RPAREN

padded_doc_comment ::= WSC* DOC_COMMENT EOL?
doc_comment_block ::= padded_doc_comment padded_doc_comment* WS*
bad_doc_comment ::= padded_doc_comment padded_doc_comment* WS*
comment ::= LINE_COMMENT

import_statement ::= IMPORT_KEYWORD ((WS? import_identifier_list WS?)|WS+) STRING_LITERAL

import_identifier_list ::= import_identifiers_block WS? FROM_KEYWORD WS?
import_identifiers_block ::= padded_lbrace (IDENTIFIER (COMMA IDENTIFIER)* COMMA?)? padded_rbrace

let_declaration ::= doc_comment_block? LET_KEYWORD WS+ IDENTIFIER WS* EQ WS* expression

model_definition ::= doc_comment_block? item_decorator_list? MODEL_KEYWORD WS model_name WS? model_definition_block
model_name ::= IDENTIFIER
model_definition_block ::= padded_lbrace (block_decorator | field_definition | comment | WS)* padded_rbrace
item_decorator_list ::= item_decorator (WS item_decorator)* WS

enum_definition ::= doc_comment_block? item_decorator_list? ENUM_KEYWORD WS enum_name WS? enum_definition_block
enum_name ::= IDENTIFIER
enum_definition_block ::= padded_lbrace (block_decorator | enum_value_declaration | comment | WS)* padded_rbrace
enum_value_declaration ::= doc_comment_block? item_decorator_list? WS? enum_identifier EOL
enum_identifier ::= IDENTIFIER

item_decorator ::= AT identifier_unit

block_decorator ::= ATAT identifier_unit

pipeline ::= DOLLAR identifier_unit

CONFIG_KEYWORDS ::= CONFIG_KEYWORD | CONNECTOR_KEYWORD | CLIENT_KEYWORD | ENTITY_KEYWORD

config_definition ::= CONFIG_KEYWORDS (WS+ config_name)? WS+ config_block
config_name ::= IDENTIFIER
config_block ::= padded_lbrace (WS? (config_item|comment) EOL)* padded_rbrace
config_item ::= doc_comment_block? config_item_name WS+ expression
config_item_name ::= IDENTIFIER

field_definition ::= doc_comment_block? item_decorator_list? field_name WS* COLON WS* field_type
field_name ::= IDENTIFIER
field_type ::= (builtin_type | user_type) ITEM_OPTIONAL? (ARITY COLLECTION_OPTIONAL?)?
builtin_type ::= "Bool" | "String" | "ObjectId" | "Int" | "Int32" | "Int64" | "Float" | "Float32" | "Float64" | "Date" | "DateTime"
user_type ::= IDENTIFIER
ARITY ::= (LBRACE RBRACE)|(LBRACKET RBRACKET)

ITEM_OPTIONAL ::= QM
COLLECTION_OPTIONAL ::= QM

nullish_coalescing ::= unit (WS* QMQM WS* unit)+

group ::= "(" expression ")"

expression ::= (nullish_coalescing | literal | IDENTIFIER | group | pipeline) (subscript | "." IDENTIFIER | argument_list)*

subscript ::= LBRACKET WS* expression WS* RBRACKET

argument_list ::= LPAREN (argument (padded_comma argument)* padded_comma?)? RPAREN

argument ::= named_argument | expression

named_argument ::= IDENTIFIER padded_colon expression

unit ::= (group | NULL_LITERAL | BOOL_LITERAL | NUMERIC_LITERAL | STRING_LITERAL | enum_choice_literal | tuple_literal | IDENTIFIER) (subscript | DOT IDENTIFIER | argument_list)*
identifier_unit ::= initial_unit_identifier (subscript | DOT IDENTIFIER | argument_list)*
initial_unit_identifier ::= IDENTIFIER
tuple_literal ::= padded_lparen (padded_comma | (expression padded_comma (expression (padded_comma expression)* padded_comma?)*)) padded_rparen
array_literal ::= padded_lbracket (expression (padded_comma expression)* padded_comma?)? padded_rbracket
named_expression ::= expression WS* padded_colon WS* expression
dictionary_literal ::= padded_lbrace (named_expression (padded_comma named_expression)* padded_comma?)? padded_rbrace

literal ::= STRING_LITERAL | NUMERIC_LITERAL | BOOL_LITERAL | array_literal | dictionary_literal | tuple_literal | RANGE_LITERAL | enum_choice_literal

enum_choice_literal ::= DOT enum_member_name
enum_member_name ::= IDENTIFIER
